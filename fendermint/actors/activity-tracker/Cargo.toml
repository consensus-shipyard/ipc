[package]
name = "fendermint_actor_activity_tracker"
description = "Tracks subnet activity and generates rollups to submit to the parent in checkpoints"
license.workspace = true
edition.workspace = true
authors.workspace = true
version = "0.1.0"

[lib]
## lib is necessary for integration tests
## cdylib is necessary for Wasm build
crate-type = ["cdylib", "lib"]

[dependencies]
anyhow = { workspace = true }
cid = { workspace = true }
ethers-core = { workspace = true }
ipc-api = { workspace = true }
ipc_actors_abis = { workspace = true }
fil_actor_eam = { workspace = true }
fil_actors_runtime = { workspace = true }
fvm_ipld_blockstore = { workspace = true }
fvm_ipld_encoding = { workspace = true }
fvm_shared = { workspace = true }
log = { workspace = true }
multihash = { workspace = true }
num-derive = { workspace = true }
num-traits = { workspace = true }
serde = { workspace = true }
hex-literal = { workspace = true }
frc42_dispatch = { workspace = true }

## Need to depend on getrandom so we can register a custom handler that does nothing.
## This is necessary because ethers-rs reexports rand for other ethers crates to depend on.
## But this has the side effect of introducing a transitive dependency on rand, which messes up our wasm32-unknown-unknown build.
## We don't want to enable the "js" feature of getrandom, since we don't run on the browser anyway.
## So we apply the workaround suggested here: https://github.com/gakonst/ethers-rs/issues/2457
## Which requires us to register a custom handler for getrandom for unknown targets which fails unconditionally. It won't be invoked anyway.
getrandom = { version = "0.2.10", default-features = false, features = ["custom"] }

[dev-dependencies]
fil_actors_evm_shared = { workspace = true }
fil_actors_runtime = { workspace = true, features = ["test_utils"] }

[features]
fil-actor = ["fil_actors_runtime/fil-actor"]
