[tasks.fendermint-start]
extend = "fendermint-run"
env = { "ENTRY" = "fendermint", "CMD" = "run", "FLAGS" = "-d" }

[tasks.fendermint-pull]
condition = { env_not_set = [
  "FM_PULL_SKIP",
], fail_message = "Skipped pulling fendermint Docker image." }
script = """
  docker pull ghcr.io/consensus-shipyard/fendermint:${FM_DOCKER_TAG}
  docker tag ghcr.io/consensus-shipyard/fendermint:${FM_DOCKER_TAG} fendermint:${FM_DOCKER_TAG}
"""

[tasks.fendermint-run]
script.main = """
docker run \
  ${FLAGS} \
  --name ${FM_CONTAINER_NAME} \
  --init \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --volume ${BASE_DIR}:/data \
  --env-file ${ENV_FILE} \
  --env NODE_NAME=${NODE_NAME} \
  --env FM_DATA_DIR=/data/${NODE_NAME}/fendermint/data \
  --env FM_LOG_DIR=/data/${NODE_NAME}/fendermint/data/logs \
  --env FM_SNAPSHOTS_DIR=/data/${NODE_NAME}/fendermint/snapshots \
  --env FM_CHAIN_NAME=${NETWORK_NAME} \
  --env TENDERMINT_RPC_URL=http://${CMT_CONTAINER_NAME}:26657 \
  --env LOG_LEVEL=${FM_LOG_LEVEL} \
  --env RUST_BACKTRACE=1 \
  --entrypoint ${ENTRY} \
  ${FM_DOCKER_IMAGE} \
  --network=${FM_NETWORK} \
  ${CMD}
"""
dependencies = ["docker-network-create", "fendermint-deps"]

[tasks.fendermint-start-validator]
extend = "fendermint-run-validator"
env = { "ENTRY" = "fendermint", "CMD" = "run", "FLAGS" = "-d" }

[tasks.fendermint-run-validator]
script = """
docker run \
  ${FLAGS} \
  --name ${FM_CONTAINER_NAME} \
  --init \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --volume ${BASE_DIR}:/data \
  --env FM_DATA_DIR=/data/${NODE_NAME}/fendermint/data \
  --env FM_LOG_DIR=/data/${NODE_NAME}/fendermint/data/logs \
  --env FM_SNAPSHOTS_DIR=/data/${NODE_NAME}/fendermint/snapshots \
  --env FM_CHAIN_NAME=${NETWORK_NAME} \
  --env FM_IPC__SUBNET_ID=${SUBNET_ID} \
  --env FM_IPC__TOPDOWN__CHAIN_HEAD_DELAY=${TOPDOWN_CHAIN_HEAD_DELAY} \
  --env FM_IPC__TOPDOWN__PARENT_HTTP_ENDPOINT=${PARENT_ENDPOINT} \
  --env FM_IPC__TOPDOWN__PARENT_REGISTRY=${PARENT_REGISTRY} \
  --env FM_IPC__TOPDOWN__PARENT_GATEWAY=${PARENT_GATEWAY} \
  --env FM_IPC__TOPDOWN__EXPONENTIAL_BACK_OFF=5 \
  --env FM_IPC__TOPDOWN__EXPONENTIAL_RETRY_LIMIT=5 \
  --env FM_IPC__TOPDOWN__POLLING_INTERVAL=10 \
  --env FM_IPC__TOPDOWN__PROPOSAL_DELAY=${TOPDOWN_PROPOSAL_DELAY} \
  --env FM_IPC__TOPDOWN__MAX_PROPOSAL_RANGE=${TOPDOWN_MAX_PROPOSAL_RANGE} \
  --env FM_ABCI__LISTEN__HOST=0.0.0.0 \
  --env FM_ETH__LISTEN__HOST=0.0.0.0 \
  --env FM_TENDERMINT_RPC_URL=http://${CMT_CONTAINER_NAME}:26657 \
  --env FM_VALIDATOR_KEY__PATH=/data/${NODE_NAME}/${PRIV_KEY_PATH} \
  --env FM_VALIDATOR_KEY__KIND=ethereum \
  --env TENDERMINT_RPC_URL=http://${CMT_CONTAINER_NAME}:26657 \
  --env LOG_LEVEL=${LOG_LEVEL} \
  --env RUST_BACKTRACE=1 \
  --entrypoint ${ENTRY} \
  ${FM_DOCKER_IMAGE} \
  --network=${FM_NETWORK} \
  ${CMD}
"""
dependencies = ["docker-network-create", "fendermint-deps"]

# Fendermint-subnet recipes are used for bootstrap and full-nodes.
# They don't configure any validator private key.
[tasks.fendermint-start-subnet]
extend = "fendermint-run-subnet"
env = { "ENTRY" = "fendermint", "CMD" = "run", "FLAGS" = "-d" }

[tasks.fendermint-run-subnet]
script = """
docker run \
  ${FLAGS} \
  --name ${FM_CONTAINER_NAME} \
  --init \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --volume ${BASE_DIR}:/data \
  --env FM_DATA_DIR=/data/${NODE_NAME}/fendermint/data \
  --env FM_LOG_DIR=/data/${NODE_NAME}/fendermint/data/logs \
  --env FM_SNAPSHOTS_DIR=/data/${NODE_NAME}/fendermint/snapshots \
  --env FM_CHAIN_NAME=${NETWORK_NAME} \
  --env FM_IPC__SUBNET_ID=${SUBNET_ID} \
  --env FM_IPC__TOPDOWN__CHAIN_HEAD_DELAY=${TOPDOWN_CHAIN_HEAD_DELAY} \
  --env FM_IPC__TOPDOWN__PARENT_HTTP_ENDPOINT=${PARENT_ENDPOINT} \
  --env FM_IPC__TOPDOWN__PARENT_REGISTRY=${PARENT_REGISTRY} \
  --env FM_IPC__TOPDOWN__PARENT_GATEWAY=${PARENT_GATEWAY} \
  --env FM_IPC__TOPDOWN__EXPONENTIAL_BACK_OFF=5 \
  --env FM_IPC__TOPDOWN__EXPONENTIAL_RETRY_LIMIT=5 \
  --env FM_IPC__TOPDOWN__POLLING_INTERVAL=10 \
  --env FM_IPC__TOPDOWN__PROPOSAL_DELAY=${TOPDOWN_PROPOSAL_DELAY} \
  --env FM_IPC__TOPDOWN__MAX_PROPOSAL_RANGE=${TOPDOWN_MAX_PROPOSAL_RANGE} \
  --env FM_ABCI__LISTEN__HOST=0.0.0.0 \
  --env FM_ETH__LISTEN__HOST=0.0.0.0 \
  --env FM_TENDERMINT_RPC_URL=http://${CMT_CONTAINER_NAME}:26657 \
  --env TENDERMINT_RPC_URL=http://${CMT_CONTAINER_NAME}:26657 \
  --env LOG_LEVEL=${LOG_LEVEL} \
  --env RUST_BACKTRACE=1 \
  --entrypoint ${ENTRY} \
  ${FM_DOCKER_IMAGE} \
  --network=${FM_NETWORK} \
  ${CMD}
"""
dependencies = ["docker-network-create", "fendermint-deps"]

[tasks.fendermint-tool]
script.main = """
docker run \
  ${FLAGS} \
  --init \
  --user $(id -u) \
  --volume ${BASE_DIR}:/data \
  --env LOG_LEVEL=${LOG_LEVEL} \
  --env RUST_BACKTRACE=1 \
  --entrypoint ${ENTRY} \
  ${FM_DOCKER_IMAGE} \
  --network=${FM_NETWORK} \
  ${CMD}
"""
dependencies = ["fendermint-deps"]

[tasks.fendermint-deps]
script = """
# Check if the image exists
# TODO: Check the version or use a flag to always re-build?
if docker images | awk '{print $1":"$2}' | grep fendermint; then
    echo fendermint image already exists
    docker images | grep fendermint
else
    cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/fendermint
    make docker-build
fi
"""

[tasks.fendermint-destroy]
env = { "CONTAINER_NAME" = "${FM_CONTAINER_NAME}" }
run_task = "docker-destroy"

[tasks.fendermint-logs]
extend = "docker-logs"
env = { "CONTAINER_NAME" = "${FM_CONTAINER_NAME}" }
