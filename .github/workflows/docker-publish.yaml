name: Fendermint CI - Publish

# This workflow is triggered from the main CI workflow.
on:
  workflow_call:

env:
  PROFILE: "ci"
  CARGO_TERM_COLOR: always

jobs:

  # Publish Docker image on the main branch
  publish:
    name: Publish artifacts
    runs-on: self-hosted

    permissions:
      packages: write
      contents: read

    steps:
      - name: Check out the project
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Tools
        uses: ./.github/actions/install-tools
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          rust: 1.81.0

      # Not restoring Solidity artifact cache because of supply side attack potential.

      # - name: Docker Build
      #   run: make docker-build

      # We used this for a single architecture build, but with `buildx` the push happens at the same time as the build.
      # - name: Docker Push
      #   uses: ./.github/actions/docker-push
      #   with:
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-owner: ${{ github.repository_owner }}
      #     image-name: ${{ github.event.repository.name }}

      - name: Docker Login
        shell: bash
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Docker Prep
        id: prep
        run: |
          # Update the IMAGE_ID to reflect your own Docker repository
          IMAGE_ID=textile/fendermint

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Get the short commit hash (first 7 characters of GITHUB_SHA).
          COMMIT_HASH=$(echo "${{ github.sha }}" | cut -c1-7)

          # Format the version string as sha-[short-commit-hash].
          VERSION="sha-$COMMIT_HASH"

          echo "IMAGE_TAG=$IMAGE_ID:$VERSION" >> $GITHUB_OUTPUT

      - name: Docker Deps
        run: |
          cd fendermint && make docker-deps

      - name: Build and Push Multiarch Docker Image
        run: |
          export BUILDX_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          export BUILDX_STORE="--push"
          export BUILDX_FLAGS="--platform linux/amd64,linux/arm64"
          cd fendermint && make docker-build
