name: Fendermint CI - Publish

# This workflow is triggered from the main CI workflow.
on:
  workflow_call:

env:
  CARGO_INCREMENTAL: '0'
  SCCACHE_CACHE_SIZE: 10G
  CC: "sccache clang"
  CXX: "sccache clang++"
  PROFILE: "ci"
  BUILDX_FLAGS: "--cache-from=type=gha --cache-to=type=gha,mode=max"

jobs:

  # Publish Docker image on the main branch
  publish:
    name: Publish artifacts
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    steps:
      - name: Check out the project
        uses: actions/checkout@v3

      - name: Install Tools
        uses: ./.github/actions/install-tools
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          rust: stable

      - name: Setup Cache
        uses: ./.github/actions/setup-cache
        timeout-minutes: 5
        continue-on-error: true
        with:
          # The Cargo.lock file is very likely to change between PRs, which would mean a cache miss.
          # Ideally we want to download the previous cache and do an upload if something changed.
          # That's why the Cargo.lock hash is used as a suffix, so we match on a stable one and upload if changed.
          cache-prefix: publish-${{ hashFiles('rust-toolchain', 'rust-toolchain.toml') }}
          cache-suffix: ${{ hashFiles('**/Cargo.lock') }}

      # Not restoring Solidity artifact cache because of supply side attack potential.

      # - name: Docker Build
      #   run: make docker-build

      # We used this for a single architecture build, but with `buildx` the push happens at the same time as the build.
      # - name: Docker Push
      #   uses: ./.github/actions/docker-push
      #   with:
      #     repo-token: ${{ secrets.GITHUB_TOKEN }}
      #     repo-owner: ${{ github.repository_owner }}
      #     image-name: ${{ github.event.repository.name }}

      - name: Docker Login
        shell: bash
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Docker Prep
        id: prep
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/fendermint

          # This changes all uppercase characters to lowercase.
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # This strips the git ref prefix from the version.
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # This strips the "v" prefix from the tag name.
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # This uses the Docker `latest` tag convention.
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "IMAGE_TAG=$IMAGE_ID:$VERSION" >> $GITHUB_OUTPUT

      - name: Docker Deps
        run: |
          cd fendermint && make docker-deps

      # https://github.com/marketplace/actions/free-disk-space-ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Build and Push Multiarch Docker Image
        run: |
          export BUILDX_TAG=${{ steps.prep.outputs.IMAGE_TAG }}
          export BUILDX_STORE="--push"
          export BUILDX_FLAGS="--platform linux/amd64,linux/arm64 ${BUILDX_FLAGS}"
          cd fendermint && make docker-build

      # https://github.com/Chizkiyahu/delete-untagged-ghcr-action
      - name: Delete all containers from package without tags
        uses: Chizkiyahu/delete-untagged-ghcr-action@v3
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            owner_type: org
            package_name: fendermint
            untagged_only: true
            except_untagged_multiplatform: true
